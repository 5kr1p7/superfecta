<?php

/*** *** *** *** *** *** *** *** *** *** 
Developer Notes:
2013-09-20:	Added loop to build regex, fixed minor typo, expanded query help.
			Can't figure out how to get Superfecta to accept single or double quotes in input fields. Quotes are necessary for a lot of queries.

*** *** *** *** *** *** *** *** *** ***/


class Database extends superfecta_base {

    public $description = "Searches any supported PDO databse<br/>Example PDO Query: 'SELECT `name` FROM `users` WHERE `outboundcid` = :thenumber'";
    public $version_requirement = "2.11";
    public $source_param = array(
        'DB_Driver' => array(
                'description' => 'The PDO Driver',
	            'type' => 'select',
	            'option' => array(
	                'none' => 'none'
	            ),
	            'default' => 'mysql'
        ),
        'DB_Host' => array(
                'description' => 'Host address of the database. (localhost if the database is on the same server as FreePBX)',
                'type' => 'text',
				'default' => 'localhost'
        ),
        'DB_Name' => array(
                'description' => 'Database name of the database',
                'type' => 'text',
				'default' => 'asterisk'
        ),
        'DB_User' => array(
                'description' => 'Username used to connect to the database',
                'type' => 'text',
				'default' => 'root'
        ),
        'DB_Password' => array(
                'description' => 'Password used to connect to the database',
                'type' => 'password',
				'default' => 'passw0rd'
        ),
        'SQL_Query' => array(
                'description' => 'Structure a valid MySQL query that returns the value of a single field. Using :thnumber as the variable for the CID and using :theregex as a variable for a regular expression that can be used to ignore non-digit characters stored in the database.<br>Example1: SELECT name_field FROM table_name WHERE cid = :thenumber<br>Example2: SELECT CONCAT(firstname,lastname) FROM table_name WHERE number REGEXP :theregex',
                'type' => 'text',
				'default' => ''
        )
    );
	
	function __construct() {
		if(class_exists('PDO')) {
			$this->source_param['DB_Driver']['option'] = array_combine(PDO::getAvailableDrivers(),PDO::getAvailableDrivers());
		}
	}

    function get_caller_id($thenumber, $run_param=array()) {
        $caller_id = null;
		
		if(class_exists('PDO')) {
	        	$this->DebugPrint("Connecting to database....");
		
			try {
			    $dbh = new PDO($run_param['DB_Driver'].':dbname='.$run_param['DB_Name'].';host='.$run_param['DB_Host'], $run_param['DB_User'], $run_param['DB_Password']);
			} catch (PDOException $e) {
			    $this->DebugPrint('Connection failed: ' . $e->getMessage());
			    return null;
			}
		} else {
			$this->DebugPrint("PDO not present on system...Skipping");
			return null;
		}
		$sql = $run_param['SQL_Query'];
		if(!(strpos($sql,':thenumber') || strpos($sql,':theregex'))) {
			$this->DebugPrint("You Must include ':thenumber' or ':theregex' in your SQL query...Skipping");
			return null;
		}

		//  Build regular expression from the $thenumber to avoid non-digit characters stored in database
		$theregex = "[^0-9]*";
		for( $x=0; $x < ((strlen($thenumber))-1); $x++ )  {
			$theregex .=  substr($thenumber,$x,1)."[^0-9]*";
		}
		$theregex = $theregex.(substr($thenumber,-1))."([^0-9]+|$)";

		$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		if(!$sth) {
			$this->DebugPrint("Failed to Prepare the SQL Statement. Are we connected?...Skipping");
			return null;
		}
		$this->DebugPrint("Connected!");
		$this->DebugPrint("Searching Database...");
		$sth->execute(array(':thenumber' => $thenumber));
		$sth->execute(array(':theregex' => $theregex));
		$find = $sth->fetch(PDO::FETCH_BOTH);
		
		if($find && is_array($find)) {
			$this->DebugPrint("Found..");
			return $find[0];
		} else {
			$this->DebugPrint("Not Found");
			return null;
		}
    }
}
